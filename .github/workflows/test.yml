name: FBS App Tests

on:
  push:
    branches: [ main, develop, feature/*, bugfix/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.10'
  DJANGO_VERSION: '4.2'
  POSTGRES_VERSION: '13'

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_DB: fbs_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        django-version: ['4.2', '5.0']
        exclude:
          - python-version: '3.9'
            django-version: '5.0'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 🔧 Set up Django ${{ matrix.django-version }}
      run: |
        echo "DJANGO_VERSION=${{ matrix.django-version }}" >> $GITHUB_ENV
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: 🌍 Set up environment
      run: |
        echo "DJANGO_SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DJANGO_DEBUG=False" >> $GITHUB_ENV
        echo "DB_NAME=fbs_test_db" >> $GITHUB_ENV
        echo "DB_USER=test_user" >> $GITHUB_ENV
        echo "DB_PASSWORD=test_password" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
    
    - name: 🗄️ Run database migrations
      run: |
        cd fbs_project
        python manage.py makemigrations fbs_app
        python manage.py migrate
    
    - name: 🧪 Run test suite
      run: |
        python run_tests.py --all
      env:
        DJANGO_SETTINGS_MODULE: fbs_project.settings
    
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: 📋 Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.django-version }}
        path: |
          test-results.xml
          coverage.xml
          htmlcov/
    
    - name: 📈 Test summary
      if: always()
      run: |
        echo "## 🧪 Test Results for Python ${{ matrix.python-version }} + Django ${{ matrix.django-version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f test-results.xml ]; then
          echo "✅ Tests completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Tests failed" >> $GITHUB_STEP_SUMMARY
        fi

  security:
    name: 🔒 Security Checks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🔒 Run security scans
      run: |
        python run_tests.py --security-checks
    
    - name: 📋 Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-results
        path: |
          security-scan-results.xml
          bandit-report.json

  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🔍 Run code quality checks
      run: |
        python run_tests.py --quality
    
    - name: 📋 Upload quality results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-results
        path: |
          flake8-report.txt
          black-report.txt
          isort-report.txt
          mypy-report.txt

  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: ⚡ Run performance tests
      run: |
        python run_tests.py --performance
    
    - name: 📋 Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: |
          benchmark-results.json
          performance-report.html

  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: fbs_integration_db
          POSTGRES_USER: integration_user
          POSTGRES_PASSWORD: integration_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: 🌍 Set up integration environment
      run: |
        echo "DJANGO_SECRET_KEY=integration-secret-key" >> $GITHUB_ENV
        echo "DJANGO_DEBUG=False" >> $GITHUB_ENV
        echo "DB_NAME=fbs_integration_db" >> $GITHUB_ENV
        echo "DB_USER=integration_user" >> $GITHUB_ENV
        echo "DB_PASSWORD=integration_password" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
    
        - name: 🗄️ Setup integration database
      run: |
        cd fbs_project
        python manage.py makemigrations fbs_app
        python manage.py migrate

    - name: 🔗 Run integration tests
      run: |
        python run_tests.py --integration
      env:
        DJANGO_SETTINGS_MODULE: fbs_project.settings
    
    - name: 📋 Upload integration results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-results
        path: |
          integration-test-results.xml

  e2e:
    name: 🌐 End-to-End Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: fbs_e2e_db
          POSTGRES_USER: e2e_user
          POSTGRES_PASSWORD: e2e_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: 🌍 Set up E2E environment
      run: |
        echo "DJANGO_SECRET_KEY=e2e-secret-key" >> $GITHUB_ENV
        echo "DJANGO_DEBUG=False" >> $GITHUB_ENV
        echo "DB_NAME=fbs_e2e_db" >> $GITHUB_ENV
        echo "DB_USER=e2e_user" >> $GITHUB_ENV
        echo "DB_PASSWORD=e2e_password" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
    
        - name: 🗄️ Setup E2E database
      run: |
        cd fbs_project
        python manage.py makemigrations fbs_app
        python manage.py migrate

    - name: 🌐 Run E2E tests
      run: |
        python run_tests.py --markers e2e
      env:
        DJANGO_SETTINGS_MODULE: fbs_project.settings
    
    - name: 📋 Upload E2E results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-results
        path: |
          e2e-test-results.xml

  report:
    name: 📊 Generate Reports
    runs-on: ubuntu-latest
    needs: [test, security, quality, performance, integration, e2e]
    if: always()
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 📊 Download all test artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts
    
    - name: 📊 Generate comprehensive report
      run: |
        python run_tests.py --report
    
    - name: 📋 Upload final report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-report
        path: |
          htmlcov/
          coverage.xml
          test-results.xml
          performance-report.html
          security-report.html
          quality-report.html
    
    - name: 📈 Report summary
      run: |
        echo "## 📊 Test Summary Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Security Tests: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- E2E Tests: ✅" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage reports available in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Performance benchmarks captured" >> $GITHUB_STEP_SUMMARY
        echo "- Security scan results included" >> $GITHUB_STEP_SUMMARY

  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [test, security, quality, performance, integration, e2e, report]
    if: always()
    
    steps:
    - name: 📊 Test status summary
      run: |
        echo "## 🎯 FBS App Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Successful Jobs" >> $GITHUB_STEP_SUMMARY
        echo "- Test Suite: All Python/Django combinations passed" >> $GITHUB_STEP_SUMMARY
        echo "- Security Checks: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- E2E Tests: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Report Generation: Completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review test coverage reports" >> $GITHUB_STEP_SUMMARY
        echo "2. Check performance benchmarks" >> $GITHUB_STEP_SUMMARY
        echo "3. Verify security scan results" >> $GITHUB_STEP_SUMMARY
        echo "4. Deploy if all checks pass" >> $GITHUB_STEP_SUMMARY
