# Generated by Django 4.2.7 on 2025-08-29 06:53

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ApprovalRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "approval_type",
                    models.CharField(
                        choices=[
                            ("workflow", "Workflow Approval"),
                            ("document", "Document Approval"),
                            ("purchase", "Purchase Approval"),
                            ("expense", "Expense Approval"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("solution_name", models.CharField(blank=True, max_length=100)),
                ("request_data", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "approver",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="approvals_to_review",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "requester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="approval_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "fbs_approval_requests",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BusinessRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("validation", "Validation Rule"),
                            ("calculation", "Calculation Rule"),
                            ("workflow", "Workflow Rule"),
                            ("compliance", "Compliance Rule"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                ("model_name", models.CharField(max_length=100)),
                ("rule_definition", models.JSONField()),
                ("is_active", models.BooleanField(default=True)),
                ("priority", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "fbs_business_rules",
                "ordering": ["priority", "name"],
            },
        ),
        migrations.CreateModel(
            name="MSMEMarketing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("solution_name", models.CharField(max_length=100)),
                ("campaign_name", models.CharField(max_length=200)),
                (
                    "campaign_type",
                    models.CharField(
                        choices=[
                            ("digital", "Digital Marketing"),
                            ("traditional", "Traditional Marketing"),
                            ("social_media", "Social Media"),
                            ("email", "Email Marketing"),
                            ("content", "Content Marketing"),
                        ],
                        max_length=20,
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField(blank=True, null=True)),
                (
                    "budget",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                ("target_audience", models.JSONField(default=dict)),
                ("metrics", models.JSONField(default=dict)),
                ("status", models.CharField(default="active", max_length=20)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "fbs_msme_marketing",
            },
        ),
        migrations.CreateModel(
            name="MSMESetupWizard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("solution_name", models.CharField(max_length=100, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("paused", "Paused"),
                        ],
                        default="not_started",
                        max_length=20,
                    ),
                ),
                ("current_step", models.CharField(blank=True, max_length=100)),
                ("total_steps", models.IntegerField(default=0)),
                (
                    "progress",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
                ),
                ("business_type", models.CharField(blank=True, max_length=100)),
                ("configuration", models.JSONField(default=dict)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "fbs_msme_setup_wizard",
            },
        ),
        migrations.CreateModel(
            name="OdooDatabase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("host", models.CharField(max_length=255)),
                ("port", models.IntegerField(default=8069)),
                ("protocol", models.CharField(default="http", max_length=10)),
                ("username", models.CharField(max_length=100)),
                ("password", models.CharField(max_length=255)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Odoo Database",
                "verbose_name_plural": "Odoo Databases",
                "db_table": "fbs_odoo_databases",
            },
        ),
        migrations.CreateModel(
            name="RecurringTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("solution_name", models.CharField(max_length=100)),
                ("name", models.CharField(max_length=200)),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("income", "Income"),
                            ("expense", "Expense"),
                            ("payment", "Payment"),
                            ("receipt", "Receipt"),
                        ],
                        max_length=20,
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=15)),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("yearly", "Yearly"),
                        ],
                        max_length=20,
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField(blank=True, null=True)),
                ("active", models.BooleanField(default=True)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "fbs_recurring_transactions",
            },
        ),
        migrations.CreateModel(
            name="WorkflowDefinition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "workflow_type",
                    models.CharField(
                        choices=[
                            ("approval", "Approval Workflow"),
                            ("onboarding", "Onboarding Workflow"),
                            ("order_processing", "Order Processing"),
                            ("payment_collection", "Payment Collection"),
                            ("inventory_management", "Inventory Management"),
                            ("compliance", "Compliance Workflow"),
                            ("custom", "Custom Workflow"),
                        ],
                        max_length=50,
                    ),
                ),
                ("version", models.CharField(default="1.0", max_length=20)),
                ("is_active", models.BooleanField(default=True)),
                ("is_template", models.BooleanField(default=False)),
                ("trigger_conditions", models.JSONField(default=dict)),
                ("workflow_data", models.JSONField(default=dict)),
                (
                    "estimated_duration",
                    models.IntegerField(
                        blank=True, help_text="Estimated duration in hours", null=True
                    ),
                ),
                (
                    "solution_name",
                    models.CharField(
                        help_text="Solution this workflow belongs to", max_length=100
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "fbs_workflow_definitions",
                "ordering": ["workflow_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="WorkflowStep",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "step_type",
                    models.CharField(
                        choices=[
                            ("task", "Task"),
                            ("approval", "Approval"),
                            ("notification", "Notification"),
                            ("decision", "Decision"),
                            ("integration", "Integration"),
                            ("manual", "Manual Step"),
                        ],
                        max_length=50,
                    ),
                ),
                ("order", models.IntegerField()),
                ("is_required", models.BooleanField(default=True)),
                (
                    "estimated_duration",
                    models.IntegerField(
                        blank=True, help_text="Estimated duration in hours", null=True
                    ),
                ),
                ("assigned_role", models.CharField(blank=True, max_length=100)),
                ("step_data", models.JSONField(default=dict)),
                ("conditions", models.JSONField(default=dict)),
                ("actions", models.JSONField(default=list)),
                (
                    "assigned_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "workflow_definition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="steps",
                        to="fbs_app.workflowdefinition",
                    ),
                ),
            ],
            options={
                "db_table": "fbs_workflow_steps",
                "ordering": ["workflow_definition", "order"],
                "unique_together": {("workflow_definition", "order")},
            },
        ),
        migrations.CreateModel(
            name="UserActivityLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("solution_name", models.CharField(max_length=100)),
                ("user_id", models.CharField(max_length=100)),
                ("action", models.CharField(max_length=100)),
                ("details", models.JSONField(default=dict)),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("session_id", models.CharField(blank=True, max_length=100)),
            ],
            options={
                "db_table": "fbs_user_activity_logs",
                "indexes": [
                    models.Index(
                        fields=["solution_name", "user_id", "timestamp"],
                        name="fbs_user_ac_solutio_77bfaf_idx",
                    ),
                    models.Index(
                        fields=["solution_name", "action", "timestamp"],
                        name="fbs_user_ac_solutio_e687c8_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TokenMapping",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("token", models.CharField(max_length=255, unique=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "database",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="fbs_app.odoodatabase",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "fbs_token_mappings",
            },
        ),
        migrations.CreateModel(
            name="TaxCalculation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("business_id", models.CharField(max_length=100)),
                ("tax_period_start", models.DateField()),
                ("tax_period_end", models.DateField()),
                (
                    "tax_type",
                    models.CharField(
                        choices=[
                            ("income_tax", "Income Tax"),
                            ("sales_tax", "Sales Tax"),
                            ("payroll_tax", "Payroll Tax"),
                            ("property_tax", "Property Tax"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "taxable_amount",
                    models.DecimalField(decimal_places=2, max_digits=15),
                ),
                ("tax_rate", models.DecimalField(decimal_places=2, max_digits=5)),
                ("tax_amount", models.DecimalField(decimal_places=2, max_digits=15)),
                (
                    "deductions",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "net_tax_amount",
                    models.DecimalField(decimal_places=2, max_digits=15),
                ),
                ("payment_date", models.DateField(blank=True, null=True)),
                (
                    "payment_amount",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("partial", "Partial"),
                            ("paid", "Paid"),
                            ("overdue", "Overdue"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("due_date", models.DateField()),
                ("filing_date", models.DateField(blank=True, null=True)),
                ("filing_reference", models.CharField(blank=True, max_length=100)),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Tax Calculation",
                "verbose_name_plural": "Tax Calculations",
                "ordering": ["-tax_period_end", "tax_type"],
            },
        ),
        migrations.CreateModel(
            name="RequestLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "method",
                    models.CharField(
                        choices=[
                            ("GET", "GET"),
                            ("POST", "POST"),
                            ("PUT", "PUT"),
                            ("PATCH", "PATCH"),
                            ("DELETE", "DELETE"),
                        ],
                        max_length=10,
                    ),
                ),
                ("path", models.CharField(max_length=500)),
                ("status_code", models.IntegerField()),
                (
                    "response_time",
                    models.FloatField(help_text="Response time in milliseconds"),
                ),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True)),
                ("request_data", models.JSONField(blank=True, default=dict)),
                ("response_data", models.JSONField(blank=True, default=dict)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "database",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="fbs_app.odoodatabase",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "fbs_request_logs",
            },
        ),
        migrations.CreateModel(
            name="ReportSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("solution_name", models.CharField(max_length=100)),
                ("name", models.CharField(max_length=200)),
                ("report_type", models.CharField(max_length=50)),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("yearly", "Yearly"),
                        ],
                        max_length=20,
                    ),
                ),
                ("next_run", models.DateTimeField()),
                ("active", models.BooleanField(default=True)),
                ("configuration", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "fbs_report_schedules",
                "unique_together": {("solution_name", "name")},
            },
        ),
        migrations.CreateModel(
            name="Report",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("sales", "Sales Report"),
                            ("financial", "Financial Report"),
                            ("inventory", "Inventory Report"),
                            ("compliance", "Compliance Report"),
                            ("operational", "Operational Report"),
                            ("custom", "Custom Report"),
                        ],
                        max_length=50,
                    ),
                ),
                ("data_source", models.CharField(max_length=100)),
                ("query_parameters", models.JSONField(default=dict)),
                (
                    "output_format",
                    models.CharField(
                        choices=[
                            ("pdf", "PDF"),
                            ("excel", "Excel"),
                            ("csv", "CSV"),
                            ("json", "JSON"),
                            ("html", "HTML"),
                        ],
                        default="pdf",
                        max_length=20,
                    ),
                ),
                ("template", models.TextField(blank=True)),
                ("is_scheduled", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "fbs_reports",
                "ordering": ["report_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="OdooModule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("database_name", models.CharField(max_length=100)),
                ("module_name", models.CharField(max_length=100)),
                ("technical_name", models.CharField(max_length=100)),
                ("display_name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("version", models.CharField(max_length=50)),
                ("author", models.CharField(blank=True, max_length=200)),
                ("website", models.URLField(blank=True)),
                ("category", models.CharField(max_length=100)),
                ("is_installed", models.BooleanField(default=True)),
                ("is_active", models.BooleanField(default=True)),
                ("auto_install", models.BooleanField(default=False)),
                ("depends", models.JSONField(default=list)),
                ("data_files", models.JSONField(default=list)),
                ("demo_data", models.BooleanField(default=False)),
                ("application", models.BooleanField(default=False)),
                ("discovered_at", models.DateTimeField(auto_now_add=True)),
                ("last_verified", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "fbs_odoo_modules",
                "indexes": [
                    models.Index(
                        fields=["database_name", "is_installed"],
                        name="fbs_odoo_mo_databas_4649c0_idx",
                    ),
                    models.Index(
                        fields=["category", "is_active"],
                        name="fbs_odoo_mo_categor_0c4c61_idx",
                    ),
                ],
                "unique_together": {("database_name", "module_name")},
            },
        ),
        migrations.CreateModel(
            name="OdooModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("database_name", models.CharField(max_length=100)),
                ("model_name", models.CharField(max_length=100)),
                ("technical_name", models.CharField(max_length=100)),
                ("display_name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("module_name", models.CharField(max_length=100)),
                ("is_active", models.BooleanField(default=True)),
                ("is_installed", models.BooleanField(default=True)),
                (
                    "model_type",
                    models.CharField(
                        choices=[
                            ("base", "Base Model"),
                            ("business", "Business Model"),
                            ("system", "System Model"),
                            ("custom", "Custom Model"),
                        ],
                        default="business",
                        max_length=50,
                    ),
                ),
                ("capabilities", models.JSONField(default=list)),
                ("constraints", models.JSONField(default=dict)),
                ("discovered_at", models.DateTimeField(auto_now_add=True)),
                ("last_verified", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "fbs_odoo_models",
                "indexes": [
                    models.Index(
                        fields=["database_name", "module_name"],
                        name="fbs_odoo_mo_databas_39403e_idx",
                    ),
                    models.Index(
                        fields=["model_type", "is_active"],
                        name="fbs_odoo_mo_model_t_b86acb_idx",
                    ),
                ],
                "unique_together": {("database_name", "model_name")},
            },
        ),
        migrations.CreateModel(
            name="OdooField",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("field_name", models.CharField(max_length=100)),
                ("technical_name", models.CharField(max_length=100)),
                ("display_name", models.CharField(max_length=200)),
                ("field_type", models.CharField(max_length=100)),
                ("required", models.BooleanField(default=False)),
                ("readonly", models.BooleanField(default=False)),
                ("computed", models.BooleanField(default=False)),
                ("stored", models.BooleanField(default=True)),
                ("default_value", models.TextField(blank=True)),
                ("help_text", models.TextField(blank=True)),
                ("selection_options", models.JSONField(default=list)),
                ("relation_model", models.CharField(blank=True, max_length=100)),
                ("field_constraints", models.JSONField(default=dict)),
                ("discovered_at", models.DateTimeField(auto_now_add=True)),
                (
                    "odoo_model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fields",
                        to="fbs_app.odoomodel",
                    ),
                ),
            ],
            options={
                "db_table": "fbs_odoo_fields",
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("success", "Success"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("alert", "Alert"),
                        ],
                        default="info",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                ("solution_name", models.CharField(blank=True, max_length=100)),
                ("is_read", models.BooleanField(default=False)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "fbs_notifications",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MSMETemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "business_type",
                    models.CharField(
                        choices=[
                            ("retail", "Retail"),
                            ("manufacturing", "Manufacturing"),
                            ("services", "Services"),
                            ("restaurant", "Restaurant"),
                            ("consulting", "Consulting"),
                            ("ecommerce", "E-commerce"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                ("configuration", models.JSONField(default=dict)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "fbs_msme_templates",
                "unique_together": {("name", "business_type")},
            },
        ),
        migrations.CreateModel(
            name="MSMEKPI",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("solution_name", models.CharField(max_length=100)),
                ("kpi_name", models.CharField(max_length=200)),
                (
                    "kpi_type",
                    models.CharField(
                        choices=[
                            ("financial", "Financial"),
                            ("operational", "Operational"),
                            ("customer", "Customer"),
                            ("growth", "Growth"),
                            ("compliance", "Compliance"),
                        ],
                        max_length=20,
                    ),
                ),
                ("current_value", models.DecimalField(decimal_places=2, max_digits=15)),
                (
                    "target_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                ("unit", models.CharField(blank=True, max_length=50)),
                ("period", models.CharField(default="monthly", max_length=20)),
                ("trend", models.CharField(blank=True, max_length=20)),
                ("last_updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "fbs_msme_kpis",
                "unique_together": {("solution_name", "kpi_name", "period")},
            },
        ),
        migrations.CreateModel(
            name="MSMECompliance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("solution_name", models.CharField(max_length=100)),
                (
                    "compliance_type",
                    models.CharField(
                        choices=[
                            ("tax", "Tax Compliance"),
                            ("regulatory", "Regulatory Compliance"),
                            ("financial", "Financial Compliance"),
                            ("operational", "Operational Compliance"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("compliant", "Compliant"),
                            ("non_compliant", "Non-Compliant"),
                            ("at_risk", "At Risk"),
                            ("pending", "Pending"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("due_date", models.DateField()),
                ("actual_completion_date", models.DateField(blank=True, null=True)),
                ("requirements", models.JSONField(default=list)),
                ("documents", models.JSONField(default=list)),
                ("notes", models.TextField(blank=True)),
                ("last_checked", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "fbs_msme_compliance",
                "unique_together": {("solution_name", "compliance_type")},
            },
        ),
        migrations.CreateModel(
            name="MSMEAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("solution_name", models.CharField(max_length=100)),
                ("metric_name", models.CharField(max_length=200)),
                ("metric_value", models.DecimalField(decimal_places=2, max_digits=15)),
                ("metric_type", models.CharField(max_length=50)),
                ("period", models.CharField(default="monthly", max_length=20)),
                ("date", models.DateField()),
                ("context", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "fbs_msme_analytics",
                "indexes": [
                    models.Index(
                        fields=["solution_name", "metric_name", "date"],
                        name="fbs_msme_an_solutio_965c26_idx",
                    ),
                    models.Index(
                        fields=["solution_name", "period", "date"],
                        name="fbs_msme_an_solutio_fbf11e_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="KPI",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "kpi_type",
                    models.CharField(
                        choices=[
                            ("financial", "Financial"),
                            ("operational", "Operational"),
                            ("customer", "Customer"),
                            ("employee", "Employee"),
                            ("compliance", "Compliance"),
                            ("growth", "Growth"),
                        ],
                        max_length=50,
                    ),
                ),
                ("calculation_method", models.CharField(max_length=100)),
                ("data_source", models.CharField(max_length=100)),
                (
                    "target_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                (
                    "warning_threshold",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                (
                    "critical_threshold",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                ("unit", models.CharField(blank=True, max_length=50)),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("real_time", "Real-time"),
                            ("hourly", "Hourly"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("annually", "Annually"),
                        ],
                        default="daily",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "fbs_kpis",
                "ordering": ["kpi_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="IncomeExpense",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("business_id", models.CharField(max_length=100)),
                ("transaction_date", models.DateField()),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[("income", "Income"), ("expense", "Expense")],
                        max_length=20,
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("description", models.TextField()),
                ("category", models.CharField(max_length=100)),
                ("subcategory", models.CharField(blank=True, max_length=100)),
                ("account", models.CharField(blank=True, max_length=100)),
                ("invoice_number", models.CharField(blank=True, max_length=100)),
                ("vendor_customer", models.CharField(blank=True, max_length=200)),
                ("payment_terms", models.CharField(blank=True, max_length=100)),
                ("due_date", models.DateField(blank=True, null=True)),
                ("payment_date", models.DateField(blank=True, null=True)),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("partial", "Partial"),
                            ("paid", "Paid"),
                            ("overdue", "Overdue"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "tax_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "tax_rate",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Income/Expense",
                "verbose_name_plural": "Income/Expenses",
                "ordering": ["-transaction_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Handshake",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("handshake_id", models.CharField(max_length=100, unique=True)),
                ("solution_name", models.CharField(max_length=100)),
                ("secret_key", models.CharField(max_length=255)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("active", "Active"),
                            ("expired", "Expired"),
                            ("revoked", "Revoked"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("expires_at", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_used", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "fbs_handshakes",
                "indexes": [
                    models.Index(
                        fields=["handshake_id"], name="fbs_handsha_handsha_233506_idx"
                    ),
                    models.Index(
                        fields=["solution_name", "status"],
                        name="fbs_handsha_solutio_59dd55_idx",
                    ),
                    models.Index(
                        fields=["expires_at"], name="fbs_handsha_expires_9d899c_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="DiscoverySession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("session_id", models.CharField(max_length=100, unique=True)),
                ("database_name", models.CharField(max_length=100)),
                ("session_type", models.CharField(max_length=50)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="running",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("total_models", models.IntegerField(default=0)),
                ("total_fields", models.IntegerField(default=0)),
                ("total_modules", models.IntegerField(default=0)),
                ("errors", models.JSONField(default=list)),
                ("configuration", models.JSONField(default=dict)),
            ],
            options={
                "db_table": "fbs_discovery_sessions",
                "indexes": [
                    models.Index(
                        fields=["session_id"], name="fbs_discove_session_312e5b_idx"
                    ),
                    models.Index(
                        fields=["database_name", "status"],
                        name="fbs_discove_databas_3a894e_idx",
                    ),
                    models.Index(
                        fields=["started_at"], name="fbs_discove_started_fef8f9_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Dashboard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "dashboard_type",
                    models.CharField(
                        choices=[
                            ("msme", "MSME Dashboard"),
                            ("financial", "Financial Dashboard"),
                            ("operational", "Operational Dashboard"),
                            ("compliance", "Compliance Dashboard"),
                            ("custom", "Custom Dashboard"),
                        ],
                        max_length=50,
                    ),
                ),
                ("layout", models.JSONField(default=dict)),
                ("is_public", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "refresh_interval",
                    models.IntegerField(
                        default=300, help_text="Refresh interval in seconds"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "fbs_dashboards",
                "ordering": ["dashboard_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="CustomField",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model_name", models.CharField(max_length=100)),
                ("record_id", models.IntegerField()),
                ("field_name", models.CharField(max_length=100)),
                (
                    "field_type",
                    models.CharField(
                        choices=[
                            ("char", "Character"),
                            ("text", "Text"),
                            ("integer", "Integer"),
                            ("float", "Float"),
                            ("boolean", "Boolean"),
                            ("date", "Date"),
                            ("datetime", "DateTime"),
                            ("json", "JSON"),
                            ("choice", "Choice"),
                        ],
                        default="char",
                        max_length=20,
                    ),
                ),
                ("field_value", models.TextField()),
                ("database_name", models.CharField(blank=True, max_length=100)),
                ("solution_name", models.CharField(blank=True, max_length=100)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "fbs_custom_fields",
                "indexes": [
                    models.Index(
                        fields=["model_name", "record_id"],
                        name="fbs_custom__model_n_6c22da_idx",
                    ),
                    models.Index(
                        fields=["database_name", "model_name"],
                        name="fbs_custom__databas_420c26_idx",
                    ),
                    models.Index(
                        fields=["solution_name", "model_name"],
                        name="fbs_custom__solutio_7463b4_idx",
                    ),
                ],
                "unique_together": {
                    ("model_name", "record_id", "field_name", "database_name")
                },
            },
        ),
        migrations.CreateModel(
            name="ComplianceRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("solution_name", models.CharField(max_length=100)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "compliance_type",
                    models.CharField(
                        choices=[
                            ("tax", "Tax Compliance"),
                            ("regulatory", "Regulatory Compliance"),
                            ("audit", "Audit Compliance"),
                            ("financial", "Financial Compliance"),
                            ("operational", "Operational Compliance"),
                        ],
                        max_length=20,
                    ),
                ),
                ("requirements", models.JSONField(default=list)),
                (
                    "check_frequency",
                    models.CharField(
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("yearly", "Yearly"),
                        ],
                        default="monthly",
                        max_length=20,
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "fbs_compliance_rules",
                "unique_together": {("solution_name", "name")},
            },
        ),
        migrations.CreateModel(
            name="Chart",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "chart_type",
                    models.CharField(
                        choices=[
                            ("line", "Line Chart"),
                            ("bar", "Bar Chart"),
                            ("pie", "Pie Chart"),
                            ("area", "Area Chart"),
                            ("scatter", "Scatter Plot"),
                            ("table", "Data Table"),
                            ("gauge", "Gauge"),
                            ("metric", "Metric"),
                        ],
                        max_length=50,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("data_source", models.CharField(max_length=100)),
                ("configuration", models.JSONField(default=dict)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "fbs_charts",
                "ordering": ["chart_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="CashEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("business_id", models.CharField(max_length=100)),
                ("entry_date", models.DateField()),
                (
                    "entry_type",
                    models.CharField(
                        choices=[
                            ("income", "Income"),
                            ("expense", "Expense"),
                            ("transfer", "Transfer"),
                            ("adjustment", "Adjustment"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("description", models.TextField()),
                ("category", models.CharField(max_length=100)),
                ("subcategory", models.CharField(blank=True, max_length=100)),
                (
                    "payment_method",
                    models.CharField(
                        choices=[
                            ("cash", "Cash"),
                            ("bank_transfer", "Bank Transfer"),
                            ("check", "Check"),
                            ("credit_card", "Credit Card"),
                            ("debit_card", "Debit Card"),
                            ("mobile_payment", "Mobile Payment"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                ("reference_number", models.CharField(blank=True, max_length=100)),
                ("vendor_customer", models.CharField(blank=True, max_length=200)),
                (
                    "tax_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "tax_rate",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("notes", models.TextField(blank=True)),
                ("attachments", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Cash Entry",
                "verbose_name_plural": "Cash Entries",
                "ordering": ["-entry_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CacheEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("key", models.CharField(max_length=500, unique=True)),
                ("value", models.JSONField()),
                ("database_name", models.CharField(blank=True, max_length=100)),
                ("expires_at", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "fbs_cache_entries",
                "indexes": [
                    models.Index(fields=["key"], name="fbs_cache_e_key_241ee2_idx"),
                    models.Index(
                        fields=["expires_at"], name="fbs_cache_e_expires_0f7d1a_idx"
                    ),
                    models.Index(
                        fields=["database_name", "expires_at"],
                        name="fbs_cache_e_databas_af2f88_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="BasicLedger",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("business_id", models.CharField(max_length=100)),
                ("entry_date", models.DateField()),
                ("account", models.CharField(max_length=100)),
                (
                    "account_type",
                    models.CharField(
                        choices=[
                            ("asset", "Asset"),
                            ("liability", "Liability"),
                            ("equity", "Equity"),
                            ("income", "Income"),
                            ("expense", "Expense"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "debit_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "credit_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                ("description", models.TextField()),
                ("reference", models.CharField(blank=True, max_length=100)),
                ("reference_type", models.CharField(blank=True, max_length=50)),
                ("balance", models.DecimalField(decimal_places=2, max_digits=15)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Basic Ledger Entry",
                "verbose_name_plural": "Basic Ledger Entries",
                "ordering": ["account", "entry_date"],
            },
        ),
        migrations.CreateModel(
            name="AuditTrail",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("solution_name", models.CharField(max_length=100)),
                (
                    "record_type",
                    models.CharField(
                        choices=[
                            ("sale", "Sale"),
                            ("purchase", "Purchase"),
                            ("payment", "Payment"),
                            ("inventory", "Inventory"),
                            ("user", "User"),
                            ("system", "System"),
                        ],
                        max_length=20,
                    ),
                ),
                ("record_id", models.CharField(max_length=100)),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("create", "Create"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                            ("view", "View"),
                            ("export", "Export"),
                            ("import", "Import"),
                        ],
                        max_length=20,
                    ),
                ),
                ("user_id", models.CharField(max_length=100)),
                ("details", models.JSONField(default=dict)),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
            ],
            options={
                "db_table": "fbs_audit_trails",
                "indexes": [
                    models.Index(
                        fields=["solution_name", "record_type", "timestamp"],
                        name="fbs_audit_t_solutio_14c1d3_idx",
                    ),
                    models.Index(
                        fields=["solution_name", "user_id", "timestamp"],
                        name="fbs_audit_t_solutio_489c01_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ApprovalResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "response",
                    models.CharField(
                        choices=[
                            ("approve", "Approve"),
                            ("reject", "Reject"),
                            ("request_changes", "Request Changes"),
                        ],
                        max_length=20,
                    ),
                ),
                ("comments", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "approval_request",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responses",
                        to="fbs_app.approvalrequest",
                    ),
                ),
                (
                    "responder",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "fbs_approval_responses",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="WorkflowTransition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "transition_type",
                    models.CharField(
                        choices=[
                            ("automatic", "Automatic"),
                            ("conditional", "Conditional"),
                            ("manual", "Manual"),
                            ("timeout", "Timeout"),
                        ],
                        default="automatic",
                        max_length=50,
                    ),
                ),
                ("conditions", models.JSONField(default=dict)),
                ("actions", models.JSONField(default=list)),
                ("is_default", models.BooleanField(default=False)),
                (
                    "from_step",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outgoing_transitions",
                        to="fbs_app.workflowstep",
                    ),
                ),
                (
                    "to_step",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="incoming_transitions",
                        to="fbs_app.workflowstep",
                    ),
                ),
                (
                    "workflow_definition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transitions",
                        to="fbs_app.workflowdefinition",
                    ),
                ),
            ],
            options={
                "db_table": "fbs_workflow_transitions",
                "ordering": ["workflow_definition", "from_step__order"],
                "unique_together": {("workflow_definition", "from_step", "to_step")},
            },
        ),
        migrations.CreateModel(
            name="WorkflowInstance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("business_id", models.CharField(max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("paused", "Paused"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("failed", "Failed"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("workflow_data", models.JSONField(default=dict)),
                ("notes", models.TextField(blank=True)),
                (
                    "solution_name",
                    models.CharField(
                        help_text="Solution this workflow instance belongs to",
                        max_length=100,
                    ),
                ),
                (
                    "current_step",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="fbs_app.workflowstep",
                    ),
                ),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "workflow_definition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="fbs_app.workflowdefinition",
                    ),
                ),
            ],
            options={
                "db_table": "fbs_workflow_instances",
                "ordering": ["-started_at"],
                "indexes": [
                    models.Index(
                        fields=["business_id", "status"],
                        name="fbs_workflo_busines_0587ed_idx",
                    ),
                    models.Index(
                        fields=["current_user", "status"],
                        name="fbs_workflo_current_e6fd30_idx",
                    ),
                    models.Index(
                        fields=["solution_name", "status"],
                        name="fbs_workflo_solutio_5db9d5_idx",
                    ),
                    models.Index(
                        fields=["solution_name", "business_id"],
                        name="fbs_workflo_solutio_12554f_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="workflowdefinition",
            index=models.Index(
                fields=["solution_name", "workflow_type"],
                name="fbs_workflo_solutio_66d9ce_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="workflowdefinition",
            index=models.Index(
                fields=["solution_name", "is_active"],
                name="fbs_workflo_solutio_c587f8_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="workflowdefinition",
            unique_together={("name", "version", "solution_name")},
        ),
        migrations.AlterUniqueTogether(
            name="tokenmapping",
            unique_together={("user", "database")},
        ),
        migrations.AddIndex(
            model_name="taxcalculation",
            index=models.Index(
                fields=["business_id", "tax_type", "tax_period_end"],
                name="fbs_app_tax_busines_d4f014_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="taxcalculation",
            index=models.Index(
                fields=["payment_status", "due_date"],
                name="fbs_app_tax_payment_068d9e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="requestlog",
            index=models.Index(
                fields=["timestamp"], name="fbs_request_timesta_83505c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="requestlog",
            index=models.Index(
                fields=["user", "timestamp"], name="fbs_request_user_id_5929cc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="requestlog",
            index=models.Index(
                fields=["database", "timestamp"], name="fbs_request_databas_152103_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="requestlog",
            index=models.Index(
                fields=["status_code", "timestamp"],
                name="fbs_request_status__a36514_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="odoofield",
            index=models.Index(
                fields=["field_type"], name="fbs_odoo_fi_field_t_6d29fd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="odoofield",
            index=models.Index(
                fields=["required", "readonly"], name="fbs_odoo_fi_require_ea7efc_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="odoofield",
            unique_together={("odoo_model", "field_name")},
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["user", "is_read"], name="fbs_notific_user_id_34ae19_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["solution_name", "is_read"],
                name="fbs_notific_solutio_4a4c79_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["notification_type", "created_at"],
                name="fbs_notific_notific_75f4cf_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="incomeexpense",
            index=models.Index(
                fields=["business_id", "transaction_date"],
                name="fbs_app_inc_busines_998928_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="incomeexpense",
            index=models.Index(
                fields=["transaction_type", "category"],
                name="fbs_app_inc_transac_82fadc_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="incomeexpense",
            index=models.Index(
                fields=["payment_status", "due_date"],
                name="fbs_app_inc_payment_7260cc_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="cashentry",
            index=models.Index(
                fields=["business_id", "entry_date"],
                name="fbs_app_cas_busines_ed48ae_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="cashentry",
            index=models.Index(
                fields=["entry_type", "category"], name="fbs_app_cas_entry_t_27c8df_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cashentry",
            index=models.Index(
                fields=["payment_method", "entry_date"],
                name="fbs_app_cas_payment_5d8bac_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="basicledger",
            index=models.Index(
                fields=["business_id", "account", "entry_date"],
                name="fbs_app_bas_busines_a03762_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="basicledger",
            index=models.Index(
                fields=["account_type", "entry_date"],
                name="fbs_app_bas_account_0d4330_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="approvalrequest",
            index=models.Index(
                fields=["requester", "status"], name="fbs_approva_request_f8e0d8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="approvalrequest",
            index=models.Index(
                fields=["approver", "status"], name="fbs_approva_approve_02ad0a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="approvalrequest",
            index=models.Index(
                fields=["solution_name", "status"],
                name="fbs_approva_solutio_93acd6_idx",
            ),
        ),
    ]
